"use client";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { Toaster } from "react-hot-toast";
import { SWRConfig } from "swr";
import { Provider } from "react-redux";
import { store } from "./redux/store";
import { CartProvider } from "./context/CartContext";
import { UserDataProvider } from "./context/userContext";
import { server } from "./redux/api/axiosBaseQuery";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased !bg-white !text-black`}
      >
       
         <Toaster />
            <SWRConfig
                value={{
                    refreshInterval: false,
                    revalidateOnFocus: true,
                    fetcher: async (resource, init) => {
                        let url = resource;
                        const token = localStorage.getItem("user_token") || "";
                        const res = await fetch(`${server}/api/v1${url}`, {
                            method: "GET",
                            headers: {
                                Authorization: `Bearer ${token}`,
                                "Content-Type": "application/json",
                            },
                            ...init, // Spread any additional init options
                        });

                        if (!res.ok) {
                            const error = new Error(
                                "An error occurred while fetching the data."
                            );
                            error.info = await res.json();
                            error.status = res.status;
                            throw error;
                        }

                        return res.json();
                    },
                }}
            >
               <Provider store={store}>
              <UserDataProvider>
                <CartProvider>
                    {children}
                </CartProvider>
              </UserDataProvider>
          </Provider>
            </SWRConfig>
      </body>
    </html>
  );
}
